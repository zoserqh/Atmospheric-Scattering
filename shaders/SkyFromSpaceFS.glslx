
#version 330 core
out vec4 FragColor;

uniform vec3 v3LightPos;
uniform vec3 m_vSourceLight;
uniform float espesorMaxAtm; // 2*sqrt(rout2-rin2)
uniform float tangCamPAtm; // sqrt(|posCam|-rout2)
uniform vec3 v3CameraPos;
uniform float fOuterRadius;		// The outer (atmosphere) radius


//*debugging
//in vec3 v3aaa;
//uniform vec3 v3CameraPos;

in vec3 FragPos;
in vec3 Normal;

void main (void)
{
	vec3 v3AttFreq;
	vec3 luzAtmos;
	
	int statusMenorEspesor;
	int statusNear;
	vec3 v3Near;
	vec3 v3Far;
	float espesor;
	float k_rg = 1.5f *espesorMaxAtm; //2
	float k_b = 0.8f *espesorMaxAtm; //2
	float kFreqR = 1.0f; //0.1f 0.8f 
	float kFreqG = 1.4f; //0.8f 1.2f
	float kFreqB = 2.5f; 
	vec3 v3AttenuateRayleigh;
	float transp=1.0;

	vec3 v3Pos = FragPos; 				//sqrt(10.25)
	vec3 v3Ray = v3Pos - v3CameraPos;

	if(length(v3Ray) <= tangCamPAtm){ 
		statusNear=1;
		v3Near=v3Pos;
		// point Far
		float B = -1.0f * dot(v3CameraPos , normalize(v3Ray));
		float CC = length(v3CameraPos)*length(v3CameraPos) - B*B;
		float DD = fOuterRadius*fOuterRadius - CC;
		espesor = 2.0f * sqrt(DD);
		v3Far = v3Near + normalize(v3Ray) * espesor;

	} else {
		statusNear=0;
		v3Far=v3Pos;
		//point Near
		float B = -1.0f * dot(-v3CameraPos , normalize(v3Ray));
		float CC = length(v3CameraPos)*length(v3CameraPos) - B*B;
		float DD = fOuterRadius*fOuterRadius - CC;
		espesor = 2.0f * sqrt(DD);
		v3Near = v3Far - normalize(v3Ray) * espesor;
	}

	if(espesor <= espesorMaxAtm) { statusMenorEspesor = 1; }
	else { statusMenorEspesor = 0; }

	if(statusMenorEspesor == 1 && statusNear == 1 ){
		float attenuateRG = exp((-(1-espesor/espesorMaxAtm)) * k_rg); // exp((-espesor/espesorMaxAtm) * k) exp((-(1-espesor/espesorMaxAtm)) * k * 0.8f) //1-exp((espesor-espesorMaxAtm)/10.0f)
		float attenuateB = exp((-(1-espesor/espesorMaxAtm)) * k_b);
		v3AttenuateRayleigh = vec3(attenuateRG,attenuateRG,attenuateB);
		float cosTheta=max(dot(normalize(Normal), v3LightPos), 0.0);
		luzAtmos=m_vSourceLight;
	} else {
		float cosTheta=max(dot(normalize(Normal), v3LightPos), 0.0);
		float fAttFreqR = exp(-(1-cosTheta) * kFreqR);
		float fAttFreqG = exp(-(1-cosTheta) * kFreqG);
		float fAttFreqB = exp(-(1-cosTheta) * kFreqB);
		v3AttenuateRayleigh = vec3(fAttFreqR,fAttFreqG,fAttFreqB);

		transp=(1.0f - cosTheta); // 0.5f (1.0f - cosTheta)
		luzAtmos=vec3(0.6f,0.6f,1.0f) * m_vSourceLight; //vec3(0.5f,0.5f,1.0f)
	}
	
	// diffuseMie
    vec3 norm = normalize(Normal);
    float diff = max(dot(norm, v3LightPos), 0.0);
    vec3 diffuseMie = luzAtmos * diff;

	vec3 result = diffuseMie * v3AttenuateRayleigh;
    FragColor = vec4(result,transp); //0.5 1-diff transp
}